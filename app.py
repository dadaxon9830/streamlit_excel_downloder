import streamlit as st
import pandas as pd
from collections import Counter
import scipy as ss
import xlsxwriter
import openpyxl


st.set_page_config(page_title="–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
st.title("Data analyzer üìà üìä")
st.write(" ")
hide_st_style="""

<style>
.stDeployButton {visibility:hidden}
</style>
"""
st.markdown(hide_st_style,unsafe_allow_html=True)


uploded_file = st.file_uploader(label="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª  : ", type=["xlsx", "xls"],)
if uploded_file:
    try:
        df = pd.read_excel(uploded_file)
        st.markdown("---")


        deleted_data_list= st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å : ", df.columns)
        df=df.drop(deleted_data_list,axis=1)
        column_names=df.columns
        st.sidebar.header("–î–µ–π—Å—Ç–≤–∏—è")
        show_btn = st.sidebar.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        if show_btn:
            st.subheader(" –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            st.dataframe(df)
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —Å —á–∏—Ç–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–µ–º : {e}")

    button_emp = st.sidebar.button("–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    try:
        col_nums = df.shape[1]
        row_nums = df.shape[0]
        summa = 0
        for i, j in enumerate(df):
            summa += df[j].isna().sum()
        per = summa / (row_nums * col_nums) * 100
        if button_emp:
            st.header("–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ")
            st.write("–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—ã —Å–∏—Å—Ç–µ–º—ã : ", column_names)
            st.write("–ß–∏—Å–ª–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π : ", row_nums)
            st.write("–ß–∏—Å–ª–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π : ", col_nums)
            st.write("–û–±—à–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫—Ç–æ–≤  : ", summa)
            st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö : ", row_nums * col_nums - summa)
            st.header("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ : ")
            st.subheader("–ü–æ–ª–Ω–æ—Ç—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö : ")
            if 0 <= row_nums < 100:
                if 0 <= col_nums < 50:
                    st.write("–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
                elif 50 <= col_nums < 1000:
                    st.write("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                else:
                    st.write("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
            elif 100 <= row_nums < 500:
                if 0 <= col_nums < 50:
                    st.write("–ú–∞–ª–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ")
                elif 50 <= col_nums < 1000:
                    st.success("–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ")
                else:
                    st.write("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
            elif 500 <= row_nums < 2000:
                if 0 <= col_nums < 50:
                    st.write("–ú–∞–ª–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ")
                elif 50 <= col_nums < 1000:
                    st.write("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                else:
                    st.write("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
            else:
                st.write("–£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–≤–∏–¥—É –∑–∞–º–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ ")
            st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ : ")
            if per <= 5:
                st.write("–ù–µ–∑–Ω–∞—á–∏–ª—å–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã")
            elif per < 20:
                st.warning("–ó–Ω–∞—á–∏–ª—å–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã")
            else:
                st.write("–û–Ω–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ")
    except Exception as e:
        st.warning(f"–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ : {e}")

    try:
        constant_columns = df.columns[df.nunique() == 1]
        button_port = st.sidebar.button("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç ")
        minzn=[]
        maxzn=[]
        srzn=[]
        stdd=[]
        notanof=[]
        nijniy=[]
        verxnay=[]
        median=[]
        razm=[]
        moda=[]
        for i in df:
            minzn.append(min(df[i]))
            maxzn.append(max(df[i]))
            srzn.append(df[i].mean())
            stdd.append(df[i].std())
            notanof.append(df[i].notna().sum())
            nijniy.append(df[i].quantile(0.25))
            verxnay.append(df[i].quantile(0.75))
            median.append(df[i].median())
            razm.append(max(df[i])-min(df[i]))
            moda.append(df[i].mode(1))

        dictportstat={"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏":column_names,
                      "–º–∏–Ω. –∑–Ω–∞—á":minzn,
                      "–ù–∏–∂–Ω—è—è –∫–≤–∞—Ä—Ç–∏–ª—å": nijniy,
                      "–ú–µ–¥–∏–∞–Ω–∞": median,
                      "—Å—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ":stdd,
                      "–í–µ—Ä—Ö–Ω—è—è –∫–≤–∞—Ä—Ç–∏–ª—å": verxnay,
                      "–º–∞—Ö. –∑–Ω–∞—á": maxzn,
                      }
        diccy={"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏":column_names,
               "–û–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏":notanof,
               "—Å—Ä. –∑–Ω–∞—á": srzn,
               "–†–∞–∑–º–∞—Ö":razm,
               # "–ú–æ–¥–∞":moda,

               }
        framestat=pd.DataFrame(dictportstat)
        framestat2=pd.DataFrame(diccy)
        min_vib=0
        max_vib=0
        for i in column_names:
            if df[i].notna().sum() < min_vib:
                min_vib=df[i].notna().sum()
            if df[i].notna().sum() >max_vib:
                max_vib=df[i].notna().sum()
        if button_port:
            st.markdown("---")
            st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —Å–∏—Å—Ç–µ–º—ã")
            st.subheader("–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            a1,a2,a3=0,0,0
            for i in column_names:
                if df[i].notna().sum()<=row_nums//4:
                    a1+=1
                elif df[i].notna().sum()<=row_nums//2:
                    a2+=1
                elif df[i].notna().sum()<=3*row_nums//4:
                    a3+=1
            a4=col_nums - (a1 + a2 + a3)
            frame1=pd.DataFrame({"–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π : ":[min_vib],
            "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π : ":[ max_vib]})
            st.write("–û–±—ä–µ–º—ã –≤—ã–±–æ—Ä–æ–∫ : ",frame1)
            if row_nums < 4:
                st.write(f"–æ—Ç 0 –¥–æ {row_nums} : ", col_nums)
            else:
                frame2=pd.DataFrame([(str(f"–æ—Ç 0 –¥–æ {row_nums //4} : "),a1),
                                     (str(f"{row_nums // 4} –æ—Ç  –¥–æ {row_nums // 2} : "), a2),
                                     (str(f"{row_nums // 2} –æ—Ç  –¥–æ {3 * row_nums // 4} : "), a3),
                                     (str(f"{3 * row_nums // 4} –æ—Ç  –¥–æ {row_nums} : "), a4)],
                                    columns=("–¥–∏–∞–ø–∞–∑–æ–Ω","–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"))
                st.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—ä–µ–º—É –≤—ã–±–æ—Ä–∫–∏ : ",frame2)
                st.bar_chart(frame2.set_index("–¥–∏–∞–ø–∞–∑–æ–Ω"),color= "#A7C7E7")
            st.write(f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—ã —Å –Ω–µ–∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:",constant_columns)
            st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ö–≤–∞–Ω—Ç–∏–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
            st.write(framestat)
            st.subheader("–¢–∞–±–ª–∏—Ü–∞ –î–µ—Å–∫—Ä–∏–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
            st.write(framestat2)
            st.header("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
            st.subheader("–ü–æ–ª–Ω–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–±–ª—é–¥–µ–Ω–∏–π :")
            try :
                if a1 > a2 + a3 + a4 or a2> a1+a3+a4 or a3>a1+a2+a4 or a4 > a1+a2+a3:
                    st.warning("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è. ")
                else:
                    st.success("–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è.")

            except:
                pass
            st.subheader("–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–±–ª—é–¥–µ–Ω–∏–π :")
            if col_nums > 50:
                st.success("–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è.")
            else:
                st.warning("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è. ")

    except Exception as e:
        st.warning(f"–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ : {e}")

    try:
        st.sidebar.title("–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ —Å–ª–æ–≤")
        obyom_rang = dict()
        dol_raz_sostoyaniy = dict()
        max_sovpad = dict()
        sr_sovpad = dict()
        for i in df:
            obyem_viborki = df[i].notna().sum()
            koef1 = obyem_viborki / len(df)
            if koef1 < 0.25:
                ko = 1
            elif koef1 < 0.5:
                ko = 2
            elif koef1 < 0.75:
                ko = 3
            else:
                ko = 4
            obyom_rang[i] = ko
            dol_raz_sostoyaniy[i] = df[i].nunique() / len(df)
            counter = Counter(df[i].values)
            max_frequency = max(counter.values())
            res_max_freq = (max_frequency - 1) / (obyem_viborki - 1)
            max_sovpad[i] = res_max_freq
            srsovpad_val = df[i].nunique()
            sr_sovpad[i] = 1 / df[i].nunique() if df[i].nunique() > 0 else 0

        sorted_obyom_rang = dict(sorted(obyom_rang.items(), key=lambda x: x[1], reverse=True))
        sorted_dol_raz_sos = dict(sorted(dol_raz_sostoyaniy.items(), key=lambda x: x[1], reverse=True))
        sorted_res_max_sovpad = dict(sorted(max_sovpad.items(), key=lambda x: x[1], reverse=False))
        sorted_sr_sovpad = dict(sorted(sr_sovpad.items(), key=lambda x: x[1], reverse=False))

        razmax= dict()
        maks=dict()
        xarakter=dict()

        for i in df:
            ls=[]
            meann=df[i].mean()
            stdd=df[i].std()
            bigls=df[i].tolist()
            try:
                for j in range(len(bigls)):
                    if  bigls[j]> meann - 4 *stdd and  bigls[j]<meann + 4 *stdd :
                        ls.append((bigls[j]-meann)/stdd)
                razmax[i]=max(ls)-min(ls)
                maks[i]=max(abs(max(ls)),abs(min(ls)))
                if len(bigls)!=len(ls):
                    xarakter[i]=1
                else:
                    xarakter[i]=2
            except:
                pass

        # st.write(razmax)
        # st.write(maks)
        # st.write(xarakter)

        if "button_clicked" not in st.session_state:
            st.session_state.button_clicked = False
        def callback():
            st.session_state.button_clicked = True
        def anticallback():
            st.session_state.button_clicked = False
        pred_btn = st.sidebar.button("–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",on_click=callback)
        dictt = {"–í–∞—Ä_0": sorted_obyom_rang.keys(),
                 "–û–±—ä–µ–º-—Ä–∞–Ω–≥": sorted_obyom_rang.values(),
                 "–í–∞—Ä_1": sorted_dol_raz_sos.keys(),
                 "–î–æ–ª—è —Ä–∞–∑–Ω.–∑–Ω–∞—á.": sorted_dol_raz_sos.values(),
                 "–í–∞—Ä_2": sorted_res_max_sovpad.keys(),
                 "–ú–∞–∫—Å.—Å–æ–≤–ø–∞–¥.": sorted_res_max_sovpad.values(),
                 "–í–∞—Ä_3": sorted_sr_sovpad.keys(),
                 "–°—Ä.–°–æ–≤–ø–∞–¥": sorted_sr_sovpad.values()
                 }
        dataa = pd.DataFrame(dictt)

        if pred_btn or st.session_state.button_clicked:
            st.title("–¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è:")
            st.write(dataa)
            st.title("–¢–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å")
            st.subheader("–ú–∞—Å—à—Ç–∞–±–Ω–æ—Å—Ç—å ")
            st.write("–†–∞–∑–º–∞—Ö –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è : ---")
            st.subheader("–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π")
            st.write("–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π : ---")
            st.subheader("–ù–µ–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
            st.write("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ : --- ")


            def converter_matrix(dictionary, type_sort):
                returned_dict = {}
                if type_sort:
                    for i, y in enumerate(dictionary.keys()):
                        returned_dict[y] = ss.stats.rankdata(list(dictionary.values()))[i]
                else:
                    for i, y in enumerate(dictionary.keys()):
                        returned_dict[y] = len(ss.stats.rankdata(list(dictionary.values()))) - \
                                           ss.stats.rankdata(list(dictionary.values()))[i] + 1
                return returned_dict


            st.subheader("–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")
            sorted_obyom_rang_matrix = converter_matrix(sorted_obyom_rang, False)
            sorted_dol_raz_sos_matrix = converter_matrix(sorted_dol_raz_sos, False)
            sorted_res_max_sovpad_matrix = converter_matrix(sorted_res_max_sovpad, True)
            sorted_sr_sovpad_matrix = converter_matrix(sorted_sr_sovpad, True)

            matrix_obyom_po_colum = {}
            matrix_dol_raz_sos_po_colum = {}
            matrix_res_max_sovpad_po_colum = {}
            matrix_sr_sovpad_po_colum = {}
            for i in column_names:
                matrix_obyom_po_colum[i] = sorted_obyom_rang_matrix[i]
                matrix_dol_raz_sos_po_colum[i] = sorted_dol_raz_sos_matrix[i]
                matrix_res_max_sovpad_po_colum[i] = sorted_res_max_sovpad_matrix[i]
                matrix_sr_sovpad_po_colum[i] = sorted_sr_sovpad_matrix[i]

            dictt_1 = {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏": column_names,
                       "–û–±—ä–µ–º-—Ä–∞–Ω–≥": matrix_obyom_po_colum.values(),
                       "–î–æ–ª—è —Ä–∞–∑–Ω.–∑–Ω–∞—á.": matrix_dol_raz_sos_po_colum.values(),
                       "–ú–∞–∫—Å.—Å–æ–≤–ø–∞–¥.": matrix_res_max_sovpad_po_colum.values(),
                       "–°—Ä.–°–æ–≤–ø–∞–¥": matrix_sr_sovpad_po_colum.values()
                       }
            dataa_1 = pd.DataFrame(dictt_1)
            dataa_1["—Å—É–º–º–∞"] = dataa_1[dataa_1.columns[1:]].sum(axis=1)
            # ozgartish garak
            M = 4
            A = M * (col_nums + 1) / 2
            S = sum([(A - i) ** 2 for i in dataa_1["—Å—É–º–º–∞"]])
            W = (12 * S) / (M ** 2 * col_nums * (col_nums ** 2 - 1))
            st.write(dataa_1)
            dictt_2 = {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏": column_names,
                       "–û–±—ä–µ–º-—Ä–∞–Ω–≥": [col_nums - i for i in list(matrix_obyom_po_colum.values())],
                       "–î–æ–ª—è —Ä–∞–∑–Ω.–∑–Ω–∞—á.": [col_nums - i for i in list(matrix_dol_raz_sos_po_colum.values())],
                       "–ú–∞–∫—Å.—Å–æ–≤–ø–∞–¥.": [col_nums - i for i in list(matrix_res_max_sovpad_po_colum.values())],
                       "–°—Ä.–°–æ–≤–ø–∞–¥": [col_nums - i for i in list(matrix_sr_sovpad_po_colum.values())]
                       }
            dataa_2 = pd.DataFrame(dictt_2)
            dataa_2["summa"] = dataa_2[dataa_2.columns[1:]].sum(axis=1)
            summa_2 = dataa_2["summa"].sum(axis=0)
            dataa_2["–≤–µ—Å"] = [i / summa_2 for i in dataa_2["summa"]]
            st.write(dataa_2)
            st.write("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–æ–Ω–∫–æ—Ä–¥–∞—Ü–∏–∏ (–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å) : ", W)

            file_name=st.text_input("–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≤–∏–¥–µ –µ–∫—Å–µ–ª—å —Ñ–∞–π–ª, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞:")
            dataa.to_excel(f"C:/Users/dadaxon9830/Desktop/{file_name}.xlsx", index=True)
            anticallback()
            if file_name:

                st.success(f"–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <-{file_name}->")





            st.title("–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å")
            st.subheader("–ì—Ä—É–ø–ø–∏—Ä—É–µ–º–æ—Å—Ç—å")
            st.write("–ß–∏—Å–ª–æ –≥—Ä—É–ø–ø : ---")
            st.subheader("–ì–ª–∞–¥–∫–æ—Å—Ç—å")
            st.write("–°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ : ---")
            st.subheader("–†–µ–ª—å–µ—Ñ–Ω–æ—Å—Ç—å")
            st.write("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏")


    except Exception as e:
        st.warning(f"–ü—Ä–µ–¥—Å—Ç–≤–∏—Ç–µ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ : {e}")
    box2 = st.sidebar.button("–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–∏—á–Ω–æ–≥–æ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ")

    if box2:
        pass



    # ("–ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–ª–∏—á–∏–Ω",
    #  "–ú–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å", "–£–∫–ª–æ–Ω–µ–Ω–∏–µ",
    #  "–¢–∏–ø–∏—á–Ω–æ—Å—Ç—å", "–§–∏–≥—É—Ä–Ω–æ—Å—Ç—å", "–û—Ç–ø–∞–¥–µ–Ω–∏–µ",
    #  "–ò–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å", "–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å")

